// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authentication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authentication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authentication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_authentication_2eproto;
namespace server {
class AuthenticateWeb;
class AuthenticateWebDefaultTypeInternal;
extern AuthenticateWebDefaultTypeInternal _AuthenticateWeb_default_instance_;
class createAccountWeb;
class createAccountWebDefaultTypeInternal;
extern createAccountWebDefaultTypeInternal _createAccountWeb_default_instance_;
}  // namespace server
PROTOBUF_NAMESPACE_OPEN
template<> ::server::AuthenticateWeb* Arena::CreateMaybeMessage<::server::AuthenticateWeb>(Arena*);
template<> ::server::createAccountWeb* Arena::CreateMaybeMessage<::server::createAccountWeb>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace server {

enum createAccountWeb_reasonType : int {
  createAccountWeb_reasonType_ACCOUNT_SUCCESS = 0,
  createAccountWeb_reasonType_ACCOUNT_ALREADY_EXISTS = 1,
  createAccountWeb_reasonType_INVALID_PASSWORD = 2
};
bool createAccountWeb_reasonType_IsValid(int value);
constexpr createAccountWeb_reasonType createAccountWeb_reasonType_reasonType_MIN = createAccountWeb_reasonType_ACCOUNT_SUCCESS;
constexpr createAccountWeb_reasonType createAccountWeb_reasonType_reasonType_MAX = createAccountWeb_reasonType_INVALID_PASSWORD;
constexpr int createAccountWeb_reasonType_reasonType_ARRAYSIZE = createAccountWeb_reasonType_reasonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* createAccountWeb_reasonType_descriptor();
template<typename T>
inline const std::string& createAccountWeb_reasonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, createAccountWeb_reasonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function createAccountWeb_reasonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    createAccountWeb_reasonType_descriptor(), enum_t_value);
}
inline bool createAccountWeb_reasonType_Parse(
    const std::string& name, createAccountWeb_reasonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<createAccountWeb_reasonType>(
    createAccountWeb_reasonType_descriptor(), name, value);
}
enum AuthenticateWeb_reasonType : int {
  AuthenticateWeb_reasonType_AUTHENTICATION_SUCCESS = 0,
  AuthenticateWeb_reasonType_INVALID_CREDENTIALS = 1,
  AuthenticateWeb_reasonType_INTERNAL_SERVER_ERROR = 2
};
bool AuthenticateWeb_reasonType_IsValid(int value);
constexpr AuthenticateWeb_reasonType AuthenticateWeb_reasonType_reasonType_MIN = AuthenticateWeb_reasonType_AUTHENTICATION_SUCCESS;
constexpr AuthenticateWeb_reasonType AuthenticateWeb_reasonType_reasonType_MAX = AuthenticateWeb_reasonType_INTERNAL_SERVER_ERROR;
constexpr int AuthenticateWeb_reasonType_reasonType_ARRAYSIZE = AuthenticateWeb_reasonType_reasonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateWeb_reasonType_descriptor();
template<typename T>
inline const std::string& AuthenticateWeb_reasonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateWeb_reasonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateWeb_reasonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateWeb_reasonType_descriptor(), enum_t_value);
}
inline bool AuthenticateWeb_reasonType_Parse(
    const std::string& name, AuthenticateWeb_reasonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateWeb_reasonType>(
    AuthenticateWeb_reasonType_descriptor(), name, value);
}
// ===================================================================

class createAccountWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.createAccountWeb) */ {
 public:
  createAccountWeb();
  virtual ~createAccountWeb();

  createAccountWeb(const createAccountWeb& from);
  createAccountWeb(createAccountWeb&& from) noexcept
    : createAccountWeb() {
    *this = ::std::move(from);
  }

  inline createAccountWeb& operator=(const createAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline createAccountWeb& operator=(createAccountWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const createAccountWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const createAccountWeb* internal_default_instance() {
    return reinterpret_cast<const createAccountWeb*>(
               &_createAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(createAccountWeb& a, createAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(createAccountWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline createAccountWeb* New() const final {
    return CreateMaybeMessage<createAccountWeb>(nullptr);
  }

  createAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<createAccountWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const createAccountWeb& from);
  void MergeFrom(const createAccountWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(createAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.createAccountWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authentication_2eproto);
    return ::descriptor_table_authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef createAccountWeb_reasonType reasonType;
  static constexpr reasonType ACCOUNT_SUCCESS =
    createAccountWeb_reasonType_ACCOUNT_SUCCESS;
  static constexpr reasonType ACCOUNT_ALREADY_EXISTS =
    createAccountWeb_reasonType_ACCOUNT_ALREADY_EXISTS;
  static constexpr reasonType INVALID_PASSWORD =
    createAccountWeb_reasonType_INVALID_PASSWORD;
  static inline bool reasonType_IsValid(int value) {
    return createAccountWeb_reasonType_IsValid(value);
  }
  static constexpr reasonType reasonType_MIN =
    createAccountWeb_reasonType_reasonType_MIN;
  static constexpr reasonType reasonType_MAX =
    createAccountWeb_reasonType_reasonType_MAX;
  static constexpr int reasonType_ARRAYSIZE =
    createAccountWeb_reasonType_reasonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reasonType_descriptor() {
    return createAccountWeb_reasonType_descriptor();
  }
  template<typename T>
  static inline const std::string& reasonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reasonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reasonType_Name.");
    return createAccountWeb_reasonType_Name(enum_t_value);
  }
  static inline bool reasonType_Parse(const std::string& name,
      reasonType* value) {
    return createAccountWeb_reasonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlainPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // optional string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string plainPassword = 3;
  bool has_plainpassword() const;
  private:
  bool _internal_has_plainpassword() const;
  public:
  void clear_plainpassword();
  const std::string& plainpassword() const;
  void set_plainpassword(const std::string& value);
  void set_plainpassword(std::string&& value);
  void set_plainpassword(const char* value);
  void set_plainpassword(const char* value, size_t size);
  std::string* mutable_plainpassword();
  std::string* release_plainpassword();
  void set_allocated_plainpassword(std::string* plainpassword);
  private:
  const std::string& _internal_plainpassword() const;
  void _internal_set_plainpassword(const std::string& value);
  std::string* _internal_mutable_plainpassword();
  public:

  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .server.createAccountWeb.reasonType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::server::createAccountWeb_reasonType type() const;
  void set_type(::server::createAccountWeb_reasonType value);
  private:
  ::server::createAccountWeb_reasonType _internal_type() const;
  void _internal_set_type(::server::createAccountWeb_reasonType value);
  public:

  // @@protoc_insertion_point(class_scope:server.createAccountWeb)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plainpassword_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  int type_;
  friend struct ::TableStruct_authentication_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateWeb) */ {
 public:
  AuthenticateWeb();
  virtual ~AuthenticateWeb();

  AuthenticateWeb(const AuthenticateWeb& from);
  AuthenticateWeb(AuthenticateWeb&& from) noexcept
    : AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline AuthenticateWeb& operator=(const AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateWeb& operator=(AuthenticateWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const AuthenticateWeb*>(
               &_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthenticateWeb& a, AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateWeb* New() const final {
    return CreateMaybeMessage<AuthenticateWeb>(nullptr);
  }

  AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateWeb& from);
  void MergeFrom(const AuthenticateWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.AuthenticateWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_authentication_2eproto);
    return ::descriptor_table_authentication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthenticateWeb_reasonType reasonType;
  static constexpr reasonType AUTHENTICATION_SUCCESS =
    AuthenticateWeb_reasonType_AUTHENTICATION_SUCCESS;
  static constexpr reasonType INVALID_CREDENTIALS =
    AuthenticateWeb_reasonType_INVALID_CREDENTIALS;
  static constexpr reasonType INTERNAL_SERVER_ERROR =
    AuthenticateWeb_reasonType_INTERNAL_SERVER_ERROR;
  static inline bool reasonType_IsValid(int value) {
    return AuthenticateWeb_reasonType_IsValid(value);
  }
  static constexpr reasonType reasonType_MIN =
    AuthenticateWeb_reasonType_reasonType_MIN;
  static constexpr reasonType reasonType_MAX =
    AuthenticateWeb_reasonType_reasonType_MAX;
  static constexpr int reasonType_ARRAYSIZE =
    AuthenticateWeb_reasonType_reasonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reasonType_descriptor() {
    return AuthenticateWeb_reasonType_descriptor();
  }
  template<typename T>
  static inline const std::string& reasonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reasonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reasonType_Name.");
    return AuthenticateWeb_reasonType_Name(enum_t_value);
  }
  static inline bool reasonType_Parse(const std::string& name,
      reasonType* value) {
    return AuthenticateWeb_reasonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlainPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // optional string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string plainPassword = 3;
  bool has_plainpassword() const;
  private:
  bool _internal_has_plainpassword() const;
  public:
  void clear_plainpassword();
  const std::string& plainpassword() const;
  void set_plainpassword(const std::string& value);
  void set_plainpassword(std::string&& value);
  void set_plainpassword(const char* value);
  void set_plainpassword(const char* value, size_t size);
  std::string* mutable_plainpassword();
  std::string* release_plainpassword();
  void set_allocated_plainpassword(std::string* plainpassword);
  private:
  const std::string& _internal_plainpassword() const;
  void _internal_set_plainpassword(const std::string& value);
  std::string* _internal_mutable_plainpassword();
  public:

  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .server.AuthenticateWeb.reasonType type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::server::AuthenticateWeb_reasonType type() const;
  void set_type(::server::AuthenticateWeb_reasonType value);
  private:
  ::server::AuthenticateWeb_reasonType _internal_type() const;
  void _internal_set_type(::server::AuthenticateWeb_reasonType value);
  public:

  // @@protoc_insertion_point(class_scope:server.AuthenticateWeb)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plainpassword_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  int type_;
  friend struct ::TableStruct_authentication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// createAccountWeb

// required int32 requestId = 1;
inline bool createAccountWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool createAccountWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void createAccountWeb::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createAccountWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 createAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:server.createAccountWeb.requestId)
  return _internal_requestid();
}
inline void createAccountWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void createAccountWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:server.createAccountWeb.requestId)
}

// optional string email = 2;
inline bool createAccountWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool createAccountWeb::has_email() const {
  return _internal_has_email();
}
inline void createAccountWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& createAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:server.createAccountWeb.email)
  return _internal_email();
}
inline void createAccountWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:server.createAccountWeb.email)
}
inline std::string* createAccountWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:server.createAccountWeb.email)
  return _internal_mutable_email();
}
inline const std::string& createAccountWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void createAccountWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void createAccountWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.createAccountWeb.email)
}
inline void createAccountWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.createAccountWeb.email)
}
inline void createAccountWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.createAccountWeb.email)
}
inline std::string* createAccountWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* createAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:server.createAccountWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void createAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.createAccountWeb.email)
}

// optional string plainPassword = 3;
inline bool createAccountWeb::_internal_has_plainpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool createAccountWeb::has_plainpassword() const {
  return _internal_has_plainpassword();
}
inline void createAccountWeb::clear_plainpassword() {
  plainpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& createAccountWeb::plainpassword() const {
  // @@protoc_insertion_point(field_get:server.createAccountWeb.plainPassword)
  return _internal_plainpassword();
}
inline void createAccountWeb::set_plainpassword(const std::string& value) {
  _internal_set_plainpassword(value);
  // @@protoc_insertion_point(field_set:server.createAccountWeb.plainPassword)
}
inline std::string* createAccountWeb::mutable_plainpassword() {
  // @@protoc_insertion_point(field_mutable:server.createAccountWeb.plainPassword)
  return _internal_mutable_plainpassword();
}
inline const std::string& createAccountWeb::_internal_plainpassword() const {
  return plainpassword_.GetNoArena();
}
inline void createAccountWeb::_internal_set_plainpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void createAccountWeb::set_plainpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.createAccountWeb.plainPassword)
}
inline void createAccountWeb::set_plainpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.createAccountWeb.plainPassword)
}
inline void createAccountWeb::set_plainpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.createAccountWeb.plainPassword)
}
inline std::string* createAccountWeb::_internal_mutable_plainpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plainpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* createAccountWeb::release_plainpassword() {
  // @@protoc_insertion_point(field_release:server.createAccountWeb.plainPassword)
  if (!has_plainpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plainpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void createAccountWeb::set_allocated_plainpassword(std::string* plainpassword) {
  if (plainpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plainpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plainpassword);
  // @@protoc_insertion_point(field_set_allocated:server.createAccountWeb.plainPassword)
}

// optional .server.createAccountWeb.reasonType type = 4;
inline bool createAccountWeb::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool createAccountWeb::has_type() const {
  return _internal_has_type();
}
inline void createAccountWeb::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::server::createAccountWeb_reasonType createAccountWeb::_internal_type() const {
  return static_cast< ::server::createAccountWeb_reasonType >(type_);
}
inline ::server::createAccountWeb_reasonType createAccountWeb::type() const {
  // @@protoc_insertion_point(field_get:server.createAccountWeb.type)
  return _internal_type();
}
inline void createAccountWeb::_internal_set_type(::server::createAccountWeb_reasonType value) {
  assert(::server::createAccountWeb_reasonType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void createAccountWeb::set_type(::server::createAccountWeb_reasonType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:server.createAccountWeb.type)
}

// -------------------------------------------------------------------

// AuthenticateWeb

// required int32 requestId = 1;
inline bool AuthenticateWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateWeb::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void AuthenticateWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void AuthenticateWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateWeb.requestId)
}

// optional string email = 2;
inline bool AuthenticateWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_email() const {
  return _internal_has_email();
}
inline void AuthenticateWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateWeb.email)
  return _internal_email();
}
inline void AuthenticateWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateWeb.email)
  return _internal_mutable_email();
}
inline const std::string& AuthenticateWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void AuthenticateWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateWeb.email)
}
inline void AuthenticateWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateWeb.email)
}
inline void AuthenticateWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateWeb.email)
}
inline std::string* AuthenticateWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateWeb.email)
}

// optional string plainPassword = 3;
inline bool AuthenticateWeb::_internal_has_plainpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_plainpassword() const {
  return _internal_has_plainpassword();
}
inline void AuthenticateWeb::clear_plainpassword() {
  plainpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticateWeb::plainpassword() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateWeb.plainPassword)
  return _internal_plainpassword();
}
inline void AuthenticateWeb::set_plainpassword(const std::string& value) {
  _internal_set_plainpassword(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateWeb.plainPassword)
}
inline std::string* AuthenticateWeb::mutable_plainpassword() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateWeb.plainPassword)
  return _internal_mutable_plainpassword();
}
inline const std::string& AuthenticateWeb::_internal_plainpassword() const {
  return plainpassword_.GetNoArena();
}
inline void AuthenticateWeb::_internal_set_plainpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AuthenticateWeb::set_plainpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateWeb.plainPassword)
}
inline void AuthenticateWeb::set_plainpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server.AuthenticateWeb.plainPassword)
}
inline void AuthenticateWeb::set_plainpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plainpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateWeb.plainPassword)
}
inline std::string* AuthenticateWeb::_internal_mutable_plainpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plainpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AuthenticateWeb::release_plainpassword() {
  // @@protoc_insertion_point(field_release:server.AuthenticateWeb.plainPassword)
  if (!has_plainpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plainpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticateWeb::set_allocated_plainpassword(std::string* plainpassword) {
  if (plainpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plainpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plainpassword);
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateWeb.plainPassword)
}

// optional .server.AuthenticateWeb.reasonType type = 4;
inline bool AuthenticateWeb::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthenticateWeb::has_type() const {
  return _internal_has_type();
}
inline void AuthenticateWeb::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::server::AuthenticateWeb_reasonType AuthenticateWeb::_internal_type() const {
  return static_cast< ::server::AuthenticateWeb_reasonType >(type_);
}
inline ::server::AuthenticateWeb_reasonType AuthenticateWeb::type() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateWeb.type)
  return _internal_type();
}
inline void AuthenticateWeb::_internal_set_type(::server::AuthenticateWeb_reasonType value) {
  assert(::server::AuthenticateWeb_reasonType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void AuthenticateWeb::set_type(::server::AuthenticateWeb_reasonType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateWeb.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::server::createAccountWeb_reasonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::createAccountWeb_reasonType>() {
  return ::server::createAccountWeb_reasonType_descriptor();
}
template <> struct is_proto_enum< ::server::AuthenticateWeb_reasonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::AuthenticateWeb_reasonType>() {
  return ::server::AuthenticateWeb_reasonType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authentication_2eproto
